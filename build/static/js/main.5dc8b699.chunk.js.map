{"version":3,"sources":["components/About.tsx","components/Loading.tsx","components/AdminSignup.tsx","hooks/useAuth.tsx","components/ErrorMessage.tsx","components/Post.tsx","components/PostCard.tsx","components/AllPosts.tsx","components/PostCardAdmin.tsx","components/AllPostsAdmin.tsx","components/EditPost.tsx","components/Header.tsx","components/Login.tsx","components/Logout.tsx","components/NewPost.tsx","components/RequireAdmin.tsx","components/Signup.tsx","reportWebVitals.ts","index.tsx"],"names":["About","className","href","Loading","AdminSignup","useState","formMessage","setFormMessage","isAdminNow","setIsAdminNow","formSubmitted","e","a","preventDefault","password","FormData","currentTarget","get","fetch","BASE_URL","mode","headers","Accept","authorization","String","localStorage","getItem","method","body","JSON","stringify","then","res","json","catch","passed","msg","to","action","onSubmit","htmlFor","type","id","name","required","value","authContext","React","createContext","AuthProvider","children","auth","tokenExists","tokenDateString","tokenDate","parseInt","Date","now","setItem","token","length","authed","setAuthed","login","form","Promise","result","username","admin","error","message","logout","clear","useAuth","Children","count","Provider","map","child","AuthConsumer","useContext","ErrorMessage","props","Post","postId","useParams","setError","isLoaded","setIsLoaded","post","setPost","comments","setComments","newComment","setNewComment","commentFormErrors","setCommentFormErrors","commentContent","setCommentContent","commentSubmitted","formData","comment","content","bool","errors","alert","useEffect","Error","reverse","_id","author","htmlDecode","publishedAt","toISOString","replace","title","cols","rows","onKeyDown","ctrlKey","key","submit","document","querySelector","click","onChange","target","input","DOMParser","parseFromString","documentElement","textContent","PostCard","substring","AllPosts","posts","setPosts","PostCardAdmin","removePost","setRemovePost","deletePost","parentNode","published","onClick","AllPostsAdmin","EditPost","postData","setPostData","NavigateTo","setNavigateTo","defaultValue","defaultChecked","Header","Login","loggedIn","setLoggedIn","email","placeholder","Logout","NewPost","RequireAdmin","Signup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","path","element","getElementById"],"mappings":"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","file":"static/js/main.5dc8b699.chunk.js","sourcesContent":["import \"../style/About.scss\";\nfunction About() {\n    return (\n        <section className=\"about\">\n            <p>\n                Created by <a href=\"https://github.com/i-3b\">Islam Naasani</a>{\" \"}\n                using Express.js and React\n            </p>\n        </section>\n    );\n}\nexport default About;\n","import \"../style/Loading.scss\";\nfunction Loading() {\n    return (\n        <div className=\"sk-chase\">\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n        </div>\n    );\n}\nexport default Loading;\n","import { ReactElement, useState } from \"react\";\nimport { Navigate } from \"react-router\";\nimport { BASE_URL } from \"..\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\nfunction AdminSignup() {\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const [isAdminNow, setIsAdminNow] = useState<Boolean>();\n    const formSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setFormMessage(<Loading />);\n        const password: any = new FormData(e.currentTarget).get(\"password\");\n        const { passed, msg } = await fetch(`${BASE_URL}/auth/admin`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${String(\n                    localStorage.getItem(\"token\")\n                )}`,\n            },\n            method: \"POST\",\n            body: JSON.stringify({ password }),\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { passed: false, msg: \"user is not logged in\" };\n            });\n        if (passed) {\n            setIsAdminNow(true);\n        } else setFormMessage(<p className=\"error\">{msg}</p>);\n    };\n    if (isAdminNow) return <Navigate to=\"/admin\" />;\n    return (\n        <form className=\"form\" action=\"\" onSubmit={formSubmitted}>\n            <header>Become an admin</header>\n            <label htmlFor=\"password\">Admin password:</label>\n            <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                required\n            ></input>\n            {formMessage}\n            <input type=\"submit\" value=\"become an admin\"></input>\n        </form>\n    );\n}\nexport default AdminSignup;\n","import React, { useState } from \"react\";\nimport { BASE_URL } from \"..\";\nimport user from \"../interfaces/user\";\n\nconst authContext = React.createContext<any>(null);\ninterface Props {\n    children: React.ReactNode;\n}\nfunction useAuth() {\n    let tokenExists: Boolean = false;\n    const tokenDateString = localStorage.getItem(\"token-date\");\n    const tokenDate = parseInt(tokenDateString ? tokenDateString : \"0\");\n    //check if token is 30 days old\n    if ((Date.now() - tokenDate) / (1000 * 60 * 60 * 24) > 29) {\n        localStorage.setItem(\"token\", \"\");\n        localStorage.setItem(\"token-date\", \"\");\n        localStorage.setItem(\"username\", \"\");\n    } else {\n        const token = localStorage.getItem(\"token\");\n        if (token?.length !== 0) tokenExists = true;\n    }\n    const [authed, setAuthed] = useState<Boolean>(tokenExists);\n\n    return {\n        authed,\n        login: (form: user) => {\n            return new Promise<string>((res) => {\n                fetch(`${BASE_URL}/auth/login`, {\n                    mode: \"cors\",\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                    },\n                    method: \"POST\",\n                    body: JSON.stringify(form),\n                })\n                    .then((res) => res.json())\n                    .then(\n                        (result) => {\n                            if (result.token) {\n                                localStorage.setItem(\"token\", result.token);\n                                localStorage.setItem(\n                                    \"token-date\",\n                                    JSON.stringify(Date.now())\n                                );\n                                localStorage.setItem(\n                                    \"username\",\n                                    result.username\n                                );\n                                localStorage.setItem(\"admin\", result.admin);\n                                setAuthed(true);\n                                res(\"\");\n                            } else {\n                                setAuthed(false);\n                                res(result.msg);\n                            }\n                        },\n                        (error) => {\n                            setAuthed(false);\n                            res(error.message);\n                        }\n                    );\n            });\n        },\n        logout: () => {\n            localStorage.clear();\n            setAuthed(false);\n            return;\n        },\n    };\n}\nexport function AuthProvider({ children }: Props) {\n    const auth = useAuth();\n\n    if (React.Children.count(children)) {\n        return (\n            <authContext.Provider value={auth}>\n                {React.Children.map(children, (child) => (\n                    <> {child}</>\n                ))}\n            </authContext.Provider>\n        );\n    }\n    return <authContext.Provider value={auth}></authContext.Provider>;\n}\n\nexport default function AuthConsumer() {\n    return React.useContext(authContext);\n}\n","import \"../style/ErrorMessage.scss\";\nfunction ErrorMessage(props: { message: string }) {\n    return <div className=\"error-message\">{props.message}</div>;\n}\nexport default ErrorMessage;\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport useAuth from \"../hooks/useAuth\";\nimport { BASE_URL } from \"../index\";\nimport comment from \"../interfaces/comment\";\nimport post from \"../interfaces/post\";\nimport \"../style/Post.scss\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Loading from \"./Loading\";\n\nfunction Post() {\n    const { authed, logout } = useAuth();\n    const { postId } = useParams();\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [post, setPost] = useState<post>();\n    const [comments, setComments] = useState<any>(<Loading />);\n    const [newComment, setNewComment] = useState<Boolean>();\n    const [commentFormErrors, setCommentFormErrors] = useState(<></>);\n    const [commentContent, setCommentContent] = useState(\"\");\n    const commentSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const formData: any = new FormData(e.currentTarget);\n        const token: string = String(localStorage.getItem(\"token\"));\n        const user = await fetch(`${BASE_URL}/user`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n        })\n            .then((res) => res.json())\n            .catch(() => null);\n        if (user) {\n            const comment = {\n                content: String(formData.get(\"comment\")),\n            };\n            const result = await fetch(`${BASE_URL}/posts/${postId}/comments`, {\n                mode: \"cors\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                    authorization: `Bearer ${token}`,\n                },\n                method: \"POST\",\n                body: JSON.stringify(comment),\n            })\n                .then((res) => res.json())\n                .catch((error) => error);\n            if (result.comment) {\n                setNewComment((bool) => !bool);\n                setCommentContent(\"\");\n            } else if (result.errors) {\n                setCommentFormErrors(\n                    <ul>\n                        {result.errors.map((error: any) => {\n                            return (\n                                <li key={error.msg} className=\"error\">\n                                    {error.msg}\n                                </li>\n                            );\n                        })}\n                    </ul>\n                );\n            }\n        } else {\n            logout();\n            alert(\"user data is invalid login again\");\n        }\n    };\n    useEffect(() => {\n        fetch(`${BASE_URL}/posts/${postId}`, {\n            mode: \"cors\",\n        })\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    if (result.msg) {\n                        throw new Error(\"Error: 404 Page not Found\");\n                    }\n                    setIsLoaded(true);\n                    setPost(result);\n                },\n                (error) => {\n                    setIsLoaded(false);\n                    setError(error);\n                }\n            )\n            .catch((error) => {\n                setError(error);\n            });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    useEffect(() => {\n        fetch(`${BASE_URL}/posts/${postId}/comments`, {\n            mode: \"cors\",\n        })\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    if (result.message) {\n                        throw new Error(\"Error: 404 Page not Found\");\n                    }\n                    setComments(() => {\n                        return (\n                            <>\n                                {result.reverse().map((comment: comment) => (\n                                    <li\n                                        key={comment._id}\n                                        id={comment._id}\n                                        className=\"comment\"\n                                    >\n                                        <h3>{comment.author}</h3>\n                                        <p>{htmlDecode(comment.content)}</p>\n                                        <span>\n                                            {new Date(comment.publishedAt)\n                                                .toISOString()\n                                                .replace(/T/, \" \")\n                                                .replace(/\\..+/, \"\")}\n                                        </span>\n                                    </li>\n                                ))}\n                            </>\n                        );\n                    });\n                },\n                (error) => {\n                    setError(error);\n                }\n            )\n            .catch((error) => {\n                setError(error);\n            });\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [newComment]);\n    if (error) {\n        return <ErrorMessage message={error.message} />;\n    } else if (!isLoaded) {\n        return <Loading />;\n    } else {\n        return (\n            <div>\n                {post && (\n                    <div className=\"post\">\n                        <h1>{htmlDecode(post.title)}</h1>\n                        <p>{htmlDecode(post.content)}</p>\n                        <span>\n                            {post.publishedAt\n                                ? new Date(post.publishedAt)\n                                      .toISOString()\n                                      .replace(/T/, \" \")\n                                      .replace(/\\..+/, \"\")\n                                : \"\"}\n                        </span>\n                    </div>\n                )}\n                <ul className=\"comment-container\">\n                    <header>Comments</header>\n                    {authed && (\n                        <form\n                            className=\"form comment-form\"\n                            onSubmit={commentSubmitted}\n                            action=\"\"\n                            method=\"GET\"\n                        >\n                            <label htmlFor=\"comment\">\n                                comment as{\" \"}\n                                <span>{localStorage.getItem(\"username\")}</span>\n                            </label>\n                            <textarea\n                                name=\"comment\"\n                                id=\"comment\"\n                                cols={20}\n                                rows={10}\n                                value={commentContent}\n                                onKeyDown={(e) => {\n                                    if (e.ctrlKey && e.key === \"Enter\") {\n                                        const submit: HTMLInputElement | null =\n                                            document.querySelector(\n                                                \"#comment-submit\"\n                                            );\n                                        if (submit) {\n                                            submit.click();\n                                        }\n                                    }\n                                }}\n                                onChange={(e) => {\n                                    setCommentContent(e.target.value);\n                                }}\n                            ></textarea>\n\n                            <input\n                                type=\"submit\"\n                                value=\"comment\"\n                                id=\"comment-submit\"\n                                title=\"Ctrl + Enter\"\n                            />\n                            {commentFormErrors}\n                        </form>\n                    )}\n                    {comments}\n                </ul>\n            </div>\n        );\n    }\n}\nexport default Post;\nexport function htmlDecode(input: string) {\n    const doc = new DOMParser().parseFromString(input, \"text/html\");\n    return doc.documentElement.textContent;\n}\n","import post from \"../interfaces/post\";\nimport \"../style/PostCard.scss\";\nimport { htmlDecode } from \"./Post\";\nfunction PostCard(props: post) {\n    return (\n        <a href={`/posts/${props._id}`} className=\"post-card\">\n            <h3>{htmlDecode(props.title)}</h3>\n            <div className=\"fade-container\">\n                <p className=\"fade\">\n                    {htmlDecode(props.content.substring(0, 500))}...\n                </p>\n                <p className=\"continue\">Continue reading</p>\n            </div>\n            <span className=\"date\">\n                {new Date(props.publishedAt)\n                    .toISOString()\n                    .replace(/T/, \" \")\n                    .replace(/\\..+/, \"\")}\n            </span>\n        </a>\n    );\n}\nexport default PostCard;\n","import { useEffect, useState } from \"react\";\nimport PostCard from \"../components/PostCard\";\nimport { BASE_URL } from \"../index\";\nimport post from \"../interfaces/post\";\nimport \"../style/AllPosts.scss\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Loading from \"./Loading\";\nfunction AllPosts() {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [posts, setPosts] = useState<post[]>([]);\n    useEffect(() => {\n        fetch(BASE_URL + \"/posts\", {\n            mode: \"cors\",\n        })\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setPosts(result);\n                },\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            );\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    if (error) {\n        return <ErrorMessage message={error.message} />;\n    } else if (!isLoaded) {\n        return <Loading />;\n    } else {\n        return (\n            <>\n                <ul className=\"posts-container\">\n                    {posts.reverse().map((post) => (\n                        <li key={post._id} id={post._id}>\n                            {PostCard(post)}\n                        </li>\n                    ))}\n                </ul>\n            </>\n        );\n    }\n}\n\nexport default AllPosts;\n","import { useState } from \"react\";\nimport { BASE_URL } from \"..\";\nimport post from \"../interfaces/post\";\nimport \"../style/PostCardAdmin.scss\";\nfunction PostCardAdmin(props: { post: post }) {\n    const [removePost, setRemovePost] = useState(false);\n    const deletePost = async (e: any) => {\n        const postId = e.target.parentNode.id;\n        const token = String(localStorage.getItem(\"token\"));\n        const result = await fetch(`${BASE_URL}/admin/posts/${postId}/`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n            method: \"DELETE\",\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { error: \"Unauthorized\" };\n            });\n        if (result.error) {\n            alert(result.error);\n        } else {\n            setRemovePost(true);\n        }\n    };\n    if (removePost) return <></>;\n    return (\n        <div className=\"post-card-admin\" id={props.post._id}>\n            <h3>{props.post.title}</h3>\n            {props.post.published && (\n                <a className=\"view\" href={`/posts/${props.post._id}`}>\n                    User view\n                </a>\n            )}\n            <a className=\"edit\" href={`/admin/posts/${props.post._id}/edit`}>\n                Edit post\n            </a>\n            <button className=\"delete\" onClick={deletePost}>\n                Delete post\n            </button>\n\n            <span className=\"date\">\n                {new Date(props.post.publishedAt)\n                    .toISOString()\n                    .replace(/T/, \" \")\n                    .replace(/\\..+/, \"\")}\n            </span>\n        </div>\n    );\n}\nexport default PostCardAdmin;\n","import React, { useEffect, useState } from \"react\";\nimport PostCardAdmin from \"../components/PostCardAdmin\";\nimport { BASE_URL } from \"../index\";\nimport post from \"../interfaces/post\";\nimport \"../style/AllPosts.scss\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Loading from \"./Loading\";\nfunction AllPostsAdmin() {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [posts, setPosts] = useState<post[]>([]);\n    useEffect(() => {\n        const token = String(localStorage.getItem(\"token\"));\n        fetch(BASE_URL + \"/admin/posts\", {\n            mode: \"cors\",\n            headers: {\n                authorization: `Bearer ${token}`,\n            },\n        })\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setPosts(result);\n                },\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            );\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isLoaded, error]);\n    if (error) {\n        return <ErrorMessage message={error.message} />;\n    } else if (!isLoaded) {\n        return <Loading />;\n    } else {\n        return (\n            <>\n                <ul className=\"posts-container\">\n                    <li className=\"new-post\">\n                        <a href=\"/admin/new\">New Post+</a>\n                    </li>\n                    {posts.reverse().map((post: post) => (\n                        <li key={post._id}>\n                            <PostCardAdmin post={post} />\n                        </li>\n                    ))}\n                </ul>\n            </>\n        );\n    }\n}\n\nexport default AllPostsAdmin;\n","import { ReactElement, useEffect, useState } from \"react\";\nimport { Navigate, useParams } from \"react-router\";\nimport { BASE_URL } from \"..\";\nimport post from \"../interfaces/post\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\nexport default function EditPost() {\n    const { postId } = useParams();\n    const [postData, setPostData] = useState<post>();\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const [NavigateTo, setNavigateTo] = useState<any>(false);\n    const formSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setFormMessage(<Loading />);\n        const formData: any = new FormData(e.currentTarget);\n        const form: any = {\n            title: formData.get(\"title\"),\n            content: formData.get(\"content\"),\n            published: formData.get(\"published\") === \"true\" ? true : false,\n        };\n        const token = String(localStorage.getItem(\"token\"));\n        const result = await fetch(`${BASE_URL}/admin/posts/${postId}/`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n            method: \"PUT\",\n            body: JSON.stringify(form),\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { errors: [{ msg: \"Unauthorized\" }] };\n            });\n\n        if (result.errors) {\n            setFormMessage(\n                <ul>\n                    {result.errors.map((error: any) => {\n                        return (\n                            <li key={error.msg} className=\"error\">\n                                {error.msg}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        } else if (form.published) {\n            setNavigateTo(<Navigate to={`/posts/${result.post._id}`} />);\n        } else {\n            setNavigateTo(<Navigate to=\"/admin/\" />);\n        }\n    };\n    useEffect(() => {\n        const token = String(localStorage.getItem(\"token\"));\n        fetch(`${BASE_URL}/admin/posts/${postId}`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { errors: [{ msg: \"Unauthorized\" }] };\n            })\n            .then((res) => {\n                setPostData(res);\n            });\n    }, []);\n    if (NavigateTo) return NavigateTo;\n    if (!postData) return <Loading />;\n    return (\n        <form className=\"form\" onSubmit={formSubmitted}>\n            <header>Edit post</header>\n            <label htmlFor=\"title\">Post title:</label>\n            <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                defaultValue={postData.title}\n                required\n            />\n            <label htmlFor=\"content\">Post content:</label>\n            <textarea\n                id=\"content\"\n                name=\"content\"\n                cols={30}\n                rows={30}\n                defaultValue={postData.content}\n                required\n            />\n            <label htmlFor=\"published\" className=\"checkbox-container\">\n                Publish post\n                <input\n                    type=\"checkbox\"\n                    id=\"published\"\n                    name=\"published\"\n                    value=\"true\"\n                    className=\"checkbox\"\n                    defaultChecked={postData.published}\n                />\n                <span className=\"checkmark\"></span>\n            </label>\n            {formMessage}\n            <input type=\"submit\" value=\"Create post\" />\n        </form>\n    );\n}\n","import { Link } from \"react-router-dom\";\nimport useAuth from \"../hooks/useAuth\";\nimport \"../style/Header.scss\";\n\nfunction Header() {\n    const { authed } = useAuth();\n    const admin = localStorage.getItem(\"admin\") === \"true\";\n    return (\n        <header className=\"page-header\">\n            <nav>\n                <ul>\n                    <li className=\"li-logo\">\n                        <Link to=\"/\" className=\"logo\"></Link>\n                    </li>\n                    {!authed && (\n                        <li>\n                            <Link to={\"/signup\"}>Sign up</Link>\n                        </li>\n                    )}\n                    {!authed && (\n                        <li>\n                            <Link to={\"/login\"}>Login</Link>\n                        </li>\n                    )}\n                    {authed && (\n                        <li>\n                            <Link to={\"/logout\"}>Logout</Link>\n\n                            <span>({localStorage.getItem(\"username\")}) </span>\n                        </li>\n                    )}\n                    {authed && admin && (\n                        <li>\n                            <Link to={\"/admin\"}>admin</Link>\n                        </li>\n                    )}\n                    <li>\n                        <Link to={\"/about\"}>About</Link>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n    );\n}\nexport default Header;\n","import { ReactElement, useState } from \"react\";\nimport { Navigate } from \"react-router\";\nimport useAuth from \"../hooks/useAuth\";\nimport user from \"../interfaces/user\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\n\nfunction Login() {\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const [loggedIn, setLoggedIn] = useState<Boolean>(false);\n    const { login } = useAuth();\n    const formSubmitted = (e: React.FormEvent<HTMLFormElement>) => {\n        setFormMessage(<Loading />);\n        e.preventDefault();\n        const formData: any = new FormData(e.currentTarget);\n        const form: user = {\n            email: formData.get(\"email\"),\n            password: formData.get(\"password\"),\n        };\n        login(form).then((error: string) => {\n            if (error) {\n                setFormMessage(<p className=\"error\">{error}</p>);\n            } else {\n                setLoggedIn(true);\n            }\n        });\n    };\n    if (loggedIn) return <Navigate to=\"/\" />;\n    return (\n        <form className=\"form\" onSubmit={formSubmitted} action=\"\" method=\"GET\">\n            <header>Login</header>\n            <label htmlFor=\"email\">Your email:</label>\n            <input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"example@mail.com\"\n                name=\"email\"\n                required\n            ></input>\n            <label htmlFor=\"password\">Your password:</label>\n            <input\n                id=\"password\"\n                type=\"password\"\n                name=\"password\"\n                required\n            ></input>\n            {formMessage}\n\n            <input type=\"submit\" value=\"login\"></input>\n        </form>\n    );\n}\nexport default Login;\n","import { Navigate } from \"react-router\";\nimport useAuth from \"../hooks/useAuth\";\n\nfunction Logout() {\n    const { logout } = useAuth();\n    logout();\n    return <Navigate to=\"/\" />;\n}\nexport default Logout;\n","import { ReactElement, useState } from \"react\";\nimport { Navigate } from \"react-router\";\nimport { BASE_URL } from \"..\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\nexport default function NewPost() {\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const [NavigateTo, setNavigateTo] = useState<any>(false);\n    const formSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setFormMessage(<Loading />);\n        const formData: any = new FormData(e.currentTarget);\n        const form: any = {\n            title: formData.get(\"title\"),\n            content: formData.get(\"content\"),\n            published: formData.get(\"published\") === \"true\" ? true : false,\n        };\n        const token = String(localStorage.getItem(\"token\"));\n        const result = await fetch(`${BASE_URL}/admin/posts`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n            method: \"POST\",\n            body: JSON.stringify(form),\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { errors: [{ msg: \"Unauthorized\" }] };\n            });\n\n        if (result.errors) {\n            setFormMessage(\n                <ul>\n                    {result.errors.map((error: any) => {\n                        return (\n                            <li key={error.msg} className=\"error\">\n                                {error.msg}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        } else if (form.published) {\n            setNavigateTo(<Navigate to={`/posts/${result.post._id}`} />);\n        } else {\n            setNavigateTo(<Navigate to=\"/admin/\" />);\n        }\n    };\n    if (NavigateTo) return NavigateTo;\n    return (\n        <form className=\"form\" onSubmit={formSubmitted}>\n            <header>New post</header>\n            <label htmlFor=\"title\">Post title:</label>\n            <input type=\"text\" id=\"title\" name=\"title\" required />\n            <label htmlFor=\"content\">Post content:</label>\n            <textarea\n                id=\"content\"\n                name=\"content\"\n                cols={30}\n                rows={30}\n                required\n            />\n            <label htmlFor=\"published\" className=\"checkbox-container\">\n                Publish post\n                <input\n                    type=\"checkbox\"\n                    id=\"published\"\n                    name=\"published\"\n                    value=\"true\"\n                    className=\"checkbox\"\n                    defaultChecked\n                />\n                <span className=\"checkmark\"></span>\n            </label>\n            {formMessage}\n            <input type=\"submit\" value=\"Create post\" />\n        </form>\n    );\n}\n","import { Navigate, Outlet } from \"react-router\";\n\nfunction RequireAdmin() {\n    if (localStorage.getItem(\"admin\") === \"true\") {\n        return <Outlet />;\n    } else return <Navigate to=\"/login\" />;\n}\nexport default RequireAdmin;\n","import { ReactElement, useState } from \"react\";\nimport { Navigate } from \"react-router\";\nimport { BASE_URL } from \"..\";\nimport useAuth from \"../hooks/useAuth\";\nimport user from \"../interfaces/user\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\n\nfunction Signup() {\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const { login } = useAuth();\n    const [loggedIn, setLoggedIn] = useState<Boolean>(false);\n\n    const formSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setFormMessage(<Loading />);\n        const formData: any = new FormData(e.currentTarget);\n        const form: user = {\n            username: formData.get(\"username\"),\n            email: formData.get(\"email\"),\n            password: formData.get(\"password\"),\n        };\n        const result = await fetch(`${BASE_URL}/auth/signup`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            method: \"POST\",\n            body: JSON.stringify(form),\n        }).then((res) => res.json());\n        if (result.errors) {\n            setFormMessage(\n                <ul>\n                    {result.errors.map((error: any) => {\n                        return (\n                            <li key={error.msg} className=\"error\">\n                                {error.msg}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        } else {\n            login({ email: form.email, password: form.password }).then(\n                (error: string) => {\n                    if (error) {\n                        return <Navigate to=\"/login\" />;\n                    } else {\n                        setLoggedIn(true);\n                    }\n                }\n            );\n        }\n    };\n    if (loggedIn) return <Navigate to=\"/\" />;\n    return (\n        <form className=\"form\" onSubmit={formSubmitted} action=\"\" method=\"GET\">\n            <header>Sign up</header>\n            <label htmlFor=\"username\">Your username:</label>\n            <input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"john_smith\"\n                name=\"username\"\n                required\n            ></input>\n            <label htmlFor=\"email\">Your email:</label>\n            <input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"example@mail.com\"\n                name=\"email\"\n                required\n            ></input>\n            <label htmlFor=\"password\">Your password:</label>\n            <input\n                id=\"password\"\n                type=\"password\"\n                name=\"password\"\n                required\n            ></input>\n            {formMessage}\n            <input type=\"submit\" value=\"Signup\"></input>\n        </form>\n    );\n}\nexport default Signup;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport About from \"./components/About\";\nimport AdminSignup from \"./components/AdminSignup\";\nimport AllPosts from \"./components/AllPosts\";\nimport AllPostsAdmin from \"./components/AllPostsAdmin\";\nimport EditPost from \"./components/EditPost\";\nimport ErrorMessage from \"./components/ErrorMessage\";\nimport Header from \"./components/Header\";\nimport Login from \"./components/Login\";\nimport Logout from \"./components/Logout\";\nimport NewPost from \"./components/NewPost\";\nimport Post from \"./components/Post\";\nimport RequireAdmin from \"./components/RequireAdmin\";\nimport Signup from \"./components/Signup\";\nimport { AuthProvider } from \"./hooks/useAuth\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nexport const BASE_URL = \"https://blog-i3b.herokuapp.com\";\n\nReactDOM.render(\n    <Router>\n        <AuthProvider>\n            <Header />\n            <Routes>\n                <Route path=\"/\" element={<AllPosts />}></Route>\n                <Route path=\"/posts/:postId\" element={<Post />}></Route>\n                <Route path=\"/login\" element={<Login />}></Route>\n                <Route path=\"/signup\" element={<Signup />}></Route>\n                <Route path=\"/logout\" element={<Logout />}></Route>\n                <Route path=\"/becomeadmin\" element={<AdminSignup />}></Route>\n                <Route path=\"/about\" element={<About />}></Route>\n                <Route path=\"/admin\" element={<RequireAdmin />}>\n                    <Route path=\"/admin/\" element={<AllPostsAdmin />}></Route>\n                    <Route path=\"/admin/new\" element={<NewPost />}></Route>\n                    <Route\n                        path=\"/admin/posts/:postId/edit\"\n                        element={<EditPost />}\n                    ></Route>\n                </Route>\n                <Route\n                    path=\"/*\"\n                    element={<ErrorMessage message=\"404 Page not found\" />}\n                ></Route>\n            </Routes>\n        </AuthProvider>\n    </Router>,\n    document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}