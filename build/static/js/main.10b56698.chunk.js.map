{"version":3,"sources":["components/About.tsx","components/Loading.tsx","components/AdminSignup.tsx","components/PostCard.tsx","components/ErrorMessage.tsx","components/AllPosts.tsx","components/PostCardAdmin.tsx","components/AllPostsAdmin.tsx","components/EditPost.tsx","hooks/useAuth.tsx","components/Header.tsx","components/Login.tsx","components/Logout.tsx","components/NewPost.tsx","components/Post.tsx","components/RequireAdmin.tsx","components/Signup.tsx","reportWebVitals.ts","index.tsx"],"names":["About","className","href","Loading","AdminSignup","useState","formMessage","setFormMessage","isAdminNow","setIsAdminNow","formSubmitted","e","a","preventDefault","password","FormData","currentTarget","get","fetch","BASE_URL","mode","headers","Accept","authorization","String","localStorage","getItem","method","body","JSON","stringify","then","res","json","catch","passed","msg","to","action","onSubmit","htmlFor","type","id","name","required","value","PostCard","props","_id","title","content","substring","Date","publishedAt","toISOString","replace","ErrorMessage","message","AllPosts","error","setError","isLoaded","setIsLoaded","posts","setPosts","useEffect","result","reverse","map","post","PostCardAdmin","removePost","setRemovePost","deletePost","postId","target","parentNode","token","alert","published","onClick","AllPostsAdmin","EditPost","useParams","postData","setPostData","NavigateTo","setNavigateTo","formData","form","errors","defaultValue","cols","rows","defaultChecked","authContext","React","createContext","AuthProvider","children","auth","tokenExists","tokenDateString","tokenDate","parseInt","now","setItem","length","authed","setAuthed","login","Promise","username","admin","logout","clear","useAuth","Children","count","Provider","child","AuthConsumer","useContext","Header","Login","loggedIn","setLoggedIn","email","placeholder","Logout","NewPost","Post","setPost","comments","setComments","newComment","setNewComment","commentFormErrors","setCommentFormErrors","commentContent","setCommentContent","commentSubmitted","comment","bool","Error","author","onChange","RequireAdmin","Signup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.10b56698.chunk.js","sourcesContent":["import \"../style/About.scss\";\nfunction About() {\n    return (\n        <section className=\"about\">\n            <p>\n                Created by <a href=\"https://github.com/i-3b\">Islam Naasani</a>{\" \"}\n                using Express.js and React\n            </p>\n        </section>\n    );\n}\nexport default About;\n","import \"../style/Loading.scss\";\nfunction Loading() {\n    return (\n        <div className=\"sk-chase\">\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n        </div>\n    );\n}\nexport default Loading;\n","import { ReactElement, useState } from \"react\";\nimport { Navigate } from \"react-router\";\nimport { BASE_URL } from \"..\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\nfunction AdminSignup() {\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const [isAdminNow, setIsAdminNow] = useState<Boolean>();\n    const formSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setFormMessage(<Loading />);\n        const password: any = new FormData(e.currentTarget).get(\"password\");\n        const { passed, msg } = await fetch(`${BASE_URL}/auth/admin`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${String(\n                    localStorage.getItem(\"token\")\n                )}`,\n            },\n            method: \"POST\",\n            body: JSON.stringify({ password }),\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { passed: false, msg: \"user is not logged in\" };\n            });\n        if (passed) {\n            setIsAdminNow(true);\n        } else setFormMessage(<p className=\"error\">{msg}</p>);\n    };\n    if (isAdminNow) return <Navigate to=\"/admin\" />;\n    return (\n        <form className=\"form\" action=\"\" onSubmit={formSubmitted}>\n            <header>Become an admin</header>\n            <label htmlFor=\"password\">Admin password:</label>\n            <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                required\n            ></input>\n            {formMessage}\n            <input type=\"submit\" value=\"become an admin\"></input>\n        </form>\n    );\n}\nexport default AdminSignup;\n","import post from \"../interfaces/post\";\nimport \"../style/PostCard.scss\";\nfunction PostCard(props: post) {\n    return (\n        <a href={`/posts/${props._id}`} className=\"post-card\">\n            <h3>{props.title}</h3>\n            <div className=\"fade-container\">\n                <p className=\"fade\">{props.content.substring(0, 500)}...</p>\n                <p className=\"continue\">Continue reading</p>\n            </div>\n            <span className=\"date\">\n                {new Date(props.publishedAt)\n                    .toISOString()\n                    .replace(/T/, \" \")\n                    .replace(/\\..+/, \"\")}\n            </span>\n        </a>\n    );\n}\nexport default PostCard;\n","import \"../style/ErrorMessage.scss\";\nfunction ErrorMessage(props: { message: string }) {\n    return <div className=\"error-message\">{props.message}</div>;\n}\nexport default ErrorMessage;\n","import { useEffect, useState } from \"react\";\nimport PostCard from \"../components/PostCard\";\nimport { BASE_URL } from \"../index\";\nimport post from \"../interfaces/post\";\nimport \"../style/AllPosts.scss\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Loading from \"./Loading\";\nfunction AllPosts() {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [posts, setPosts] = useState<post[]>([]);\n    useEffect(() => {\n        fetch(BASE_URL + \"/posts\", {\n            mode: \"cors\",\n        })\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setPosts(result);\n                },\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            );\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    if (error) {\n        return <ErrorMessage message={error.message} />;\n    } else if (!isLoaded) {\n        return <Loading />;\n    } else {\n        return (\n            <>\n                <ul className=\"posts-container\">\n                    {posts.reverse().map((post) => (\n                        <li key={post._id} id={post._id}>\n                            {PostCard(post)}\n                        </li>\n                    ))}\n                </ul>\n            </>\n        );\n    }\n}\n\nexport default AllPosts;\n","import { useState } from \"react\";\nimport { BASE_URL } from \"..\";\nimport post from \"../interfaces/post\";\nimport \"../style/PostCardAdmin.scss\";\nfunction PostCardAdmin(props: { post: post }) {\n    const [removePost, setRemovePost] = useState(false);\n    const deletePost = async (e: any) => {\n        const postId = e.target.parentNode.id;\n        const token = String(localStorage.getItem(\"token\"));\n        const result = await fetch(`${BASE_URL}/admin/posts/${postId}/`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n            method: \"DELETE\",\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { error: \"Unauthorized\" };\n            });\n        if (result.error) {\n            alert(result.error);\n        } else {\n            setRemovePost(true);\n        }\n    };\n    if (removePost) return <></>;\n    return (\n        <div className=\"post-card-admin\" id={props.post._id}>\n            <h3>{props.post.title}</h3>\n            {props.post.published && (\n                <a className=\"view\" href={`/posts/${props.post._id}`}>\n                    User view\n                </a>\n            )}\n            <a className=\"edit\" href={`/admin/posts/${props.post._id}/edit`}>\n                Edit post\n            </a>\n            <button className=\"delete\" onClick={deletePost}>\n                Delete post\n            </button>\n\n            <span className=\"date\">\n                {new Date(props.post.publishedAt)\n                    .toISOString()\n                    .replace(/T/, \" \")\n                    .replace(/\\..+/, \"\")}\n            </span>\n        </div>\n    );\n}\nexport default PostCardAdmin;\n","import React, { useEffect, useState } from \"react\";\nimport PostCardAdmin from \"../components/PostCardAdmin\";\nimport { BASE_URL } from \"../index\";\nimport post from \"../interfaces/post\";\nimport \"../style/AllPosts.scss\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Loading from \"./Loading\";\nfunction AllPostsAdmin() {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [posts, setPosts] = useState<post[]>([]);\n    useEffect(() => {\n        const token = String(localStorage.getItem(\"token\"));\n        fetch(BASE_URL + \"/admin/posts\", {\n            mode: \"cors\",\n            headers: {\n                authorization: `Bearer ${token}`,\n            },\n        })\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setPosts(result);\n                },\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            );\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isLoaded, error]);\n    if (error) {\n        return <ErrorMessage message={error.message} />;\n    } else if (!isLoaded) {\n        return <Loading />;\n    } else {\n        return (\n            <>\n                <ul className=\"posts-container\">\n                    <li className=\"new-post\">\n                        <a href=\"/admin/new\">New Post+</a>\n                    </li>\n                    {posts.reverse().map((post: post) => (\n                        <li key={post._id}>\n                            <PostCardAdmin post={post} />\n                        </li>\n                    ))}\n                </ul>\n            </>\n        );\n    }\n}\n\nexport default AllPostsAdmin;\n","import { ReactElement, useEffect, useState } from \"react\";\nimport { Navigate, useParams } from \"react-router\";\nimport { BASE_URL } from \"..\";\nimport post from \"../interfaces/post\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\nexport default function EditPost() {\n    const { postId } = useParams();\n    const [postData, setPostData] = useState<post>();\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const [NavigateTo, setNavigateTo] = useState<any>(false);\n    const formSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setFormMessage(<Loading />);\n        const formData: any = new FormData(e.currentTarget);\n        const form: any = {\n            title: formData.get(\"title\"),\n            content: formData.get(\"content\"),\n            published: formData.get(\"published\") === \"true\" ? true : false,\n        };\n        const token = String(localStorage.getItem(\"token\"));\n        const result = await fetch(`${BASE_URL}/admin/posts/${postId}/`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n            method: \"PUT\",\n            body: JSON.stringify(form),\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { errors: [{ msg: \"Unauthorized\" }] };\n            });\n\n        if (result.errors) {\n            setFormMessage(\n                <ul>\n                    {result.errors.map((error: any) => {\n                        return (\n                            <li key={error.msg} className=\"error\">\n                                {error.msg}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        } else if (form.published) {\n            setNavigateTo(<Navigate to={`/posts/${result.post._id}`} />);\n        } else {\n            setNavigateTo(<Navigate to=\"/admin/\" />);\n        }\n    };\n    useEffect(() => {\n        const token = String(localStorage.getItem(\"token\"));\n        fetch(`${BASE_URL}/admin/posts/${postId}`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { errors: [{ msg: \"Unauthorized\" }] };\n            })\n            .then((res) => {\n                setPostData(res);\n            });\n    }, []);\n    if (NavigateTo) return NavigateTo;\n    if (!postData) return <Loading />;\n    return (\n        <form className=\"form\" onSubmit={formSubmitted}>\n            <header>Edit post</header>\n            <label htmlFor=\"title\">Post title:</label>\n            <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                defaultValue={postData.title}\n                required\n            />\n            <label htmlFor=\"content\">Post content:</label>\n            <textarea\n                id=\"content\"\n                name=\"content\"\n                cols={30}\n                rows={30}\n                defaultValue={postData.content}\n                required\n            />\n            <label htmlFor=\"published\" className=\"checkbox-container\">\n                Publish post\n                <input\n                    type=\"checkbox\"\n                    id=\"published\"\n                    name=\"published\"\n                    value=\"true\"\n                    className=\"checkbox\"\n                    defaultChecked={postData.published}\n                />\n                <span className=\"checkmark\"></span>\n            </label>\n            {formMessage}\n            <input type=\"submit\" value=\"Create post\" />\n        </form>\n    );\n}\n","import React, { useState } from \"react\";\nimport { BASE_URL } from \"..\";\nimport user from \"../interfaces/user\";\n\nconst authContext = React.createContext<any>(null);\ninterface Props {\n    children: React.ReactNode;\n}\nfunction useAuth() {\n    let tokenExists: Boolean = false;\n    const tokenDateString = localStorage.getItem(\"token-date\");\n    const tokenDate = parseInt(tokenDateString ? tokenDateString : \"0\");\n    //check if token is 30 days old\n    if ((Date.now() - tokenDate) / (1000 * 60 * 60 * 24) > 29) {\n        localStorage.setItem(\"token\", \"\");\n        localStorage.setItem(\"token-date\", \"\");\n        localStorage.setItem(\"username\", \"\");\n    } else {\n        const token = localStorage.getItem(\"token\");\n        if (token?.length !== 0) tokenExists = true;\n    }\n    const [authed, setAuthed] = useState<Boolean>(tokenExists);\n\n    return {\n        authed,\n        login: (form: user) => {\n            return new Promise<string>((res) => {\n                fetch(`${BASE_URL}/auth/login`, {\n                    mode: \"cors\",\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                    },\n                    method: \"POST\",\n                    body: JSON.stringify(form),\n                })\n                    .then((res) => res.json())\n                    .then(\n                        (result) => {\n                            if (result.token) {\n                                localStorage.setItem(\"token\", result.token);\n                                localStorage.setItem(\n                                    \"token-date\",\n                                    JSON.stringify(Date.now())\n                                );\n                                localStorage.setItem(\n                                    \"username\",\n                                    result.username\n                                );\n                                localStorage.setItem(\"admin\", result.admin);\n                                setAuthed(true);\n                                res(\"\");\n                            } else {\n                                setAuthed(false);\n                                res(result.msg);\n                            }\n                        },\n                        (error) => {\n                            setAuthed(false);\n                            res(error.message);\n                        }\n                    );\n            });\n        },\n        logout: () => {\n            localStorage.clear();\n            setAuthed(false);\n            return;\n        },\n    };\n}\nexport function AuthProvider({ children }: Props) {\n    const auth = useAuth();\n\n    if (React.Children.count(children)) {\n        return (\n            <authContext.Provider value={auth}>\n                {React.Children.map(children, (child) => (\n                    <> {child}</>\n                ))}\n            </authContext.Provider>\n        );\n    }\n    return <authContext.Provider value={auth}></authContext.Provider>;\n}\n\nexport default function AuthConsumer() {\n    return React.useContext(authContext);\n}\n","import { Link } from \"react-router-dom\";\nimport useAuth from \"../hooks/useAuth\";\nimport \"../style/Header.scss\";\n\nfunction Header() {\n    const { authed } = useAuth();\n    const admin = localStorage.getItem(\"admin\") === \"true\";\n    return (\n        <header className=\"page-header\">\n            <nav>\n                <ul>\n                    <li className=\"li-logo\">\n                        <Link to=\"/\" className=\"logo\"></Link>\n                    </li>\n                    {!authed && (\n                        <li>\n                            <Link to={\"/signup\"}>Sign up</Link>\n                        </li>\n                    )}\n                    {!authed && (\n                        <li>\n                            <Link to={\"/login\"}>Login</Link>\n                        </li>\n                    )}\n                    {authed && (\n                        <li>\n                            <Link to={\"/logout\"}>Logout</Link>\n\n                            <span>({localStorage.getItem(\"username\")}) </span>\n                        </li>\n                    )}\n                    {authed && admin && (\n                        <li>\n                            <Link to={\"/admin\"}>admin</Link>\n                        </li>\n                    )}\n                    <li>\n                        <Link to={\"/about\"}>About</Link>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n    );\n}\nexport default Header;\n","import { ReactElement, useState } from \"react\";\nimport { Navigate } from \"react-router\";\nimport useAuth from \"../hooks/useAuth\";\nimport user from \"../interfaces/user\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\n\nfunction Login() {\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const [loggedIn, setLoggedIn] = useState<Boolean>(false);\n    const { login } = useAuth();\n    const formSubmitted = (e: React.FormEvent<HTMLFormElement>) => {\n        setFormMessage(<Loading />);\n        e.preventDefault();\n        const formData: any = new FormData(e.currentTarget);\n        const form: user = {\n            email: formData.get(\"email\"),\n            password: formData.get(\"password\"),\n        };\n        login(form).then((error: string) => {\n            if (error) {\n                setFormMessage(<p className=\"error\">{error}</p>);\n            } else {\n                setLoggedIn(true);\n            }\n        });\n    };\n    if (loggedIn) return <Navigate to=\"/\" />;\n    return (\n        <form className=\"form\" onSubmit={formSubmitted} action=\"\" method=\"GET\">\n            <header>Login</header>\n            <label htmlFor=\"email\">Your email:</label>\n            <input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"example@mail.com\"\n                name=\"email\"\n                required\n            ></input>\n            <label htmlFor=\"password\">Your password:</label>\n            <input\n                id=\"password\"\n                type=\"password\"\n                name=\"password\"\n                required\n            ></input>\n            {formMessage}\n\n            <input type=\"submit\" value=\"login\"></input>\n        </form>\n    );\n}\nexport default Login;\n","import { Navigate } from \"react-router\";\nimport useAuth from \"../hooks/useAuth\";\n\nfunction Logout() {\n    const { logout } = useAuth();\n    logout();\n    return <Navigate to=\"/\" />;\n}\nexport default Logout;\n","import { ReactElement, useState } from \"react\";\nimport { Navigate } from \"react-router\";\nimport { BASE_URL } from \"..\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\nexport default function NewPost() {\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const [NavigateTo, setNavigateTo] = useState<any>(false);\n    const formSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setFormMessage(<Loading />);\n        const formData: any = new FormData(e.currentTarget);\n        const form: any = {\n            title: formData.get(\"title\"),\n            content: formData.get(\"content\"),\n            published: formData.get(\"published\") === \"true\" ? true : false,\n        };\n        const token = String(localStorage.getItem(\"token\"));\n        const result = await fetch(`${BASE_URL}/admin/posts`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n            method: \"POST\",\n            body: JSON.stringify(form),\n        })\n            .then((res) => res.json())\n            .catch(() => {\n                return { errors: [{ msg: \"Unauthorized\" }] };\n            });\n\n        if (result.errors) {\n            setFormMessage(\n                <ul>\n                    {result.errors.map((error: any) => {\n                        return (\n                            <li key={error.msg} className=\"error\">\n                                {error.msg}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        } else if (form.published) {\n            setNavigateTo(<Navigate to={`/posts/${result.post._id}`} />);\n        } else {\n            setNavigateTo(<Navigate to=\"/admin/\" />);\n        }\n    };\n    if (NavigateTo) return NavigateTo;\n    return (\n        <form className=\"form\" onSubmit={formSubmitted}>\n            <header>New post</header>\n            <label htmlFor=\"title\">Post title:</label>\n            <input type=\"text\" id=\"title\" name=\"title\" required />\n            <label htmlFor=\"content\">Post content:</label>\n            <textarea\n                id=\"content\"\n                name=\"content\"\n                cols={30}\n                rows={30}\n                required\n            />\n            <label htmlFor=\"published\" className=\"checkbox-container\">\n                Publish post\n                <input\n                    type=\"checkbox\"\n                    id=\"published\"\n                    name=\"published\"\n                    value=\"true\"\n                    className=\"checkbox\"\n                    defaultChecked\n                />\n                <span className=\"checkmark\"></span>\n            </label>\n            {formMessage}\n            <input type=\"submit\" value=\"Create post\" />\n        </form>\n    );\n}\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport useAuth from \"../hooks/useAuth\";\nimport { BASE_URL } from \"../index\";\nimport comment from \"../interfaces/comment\";\nimport post from \"../interfaces/post\";\nimport \"../style/Post.scss\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Loading from \"./Loading\";\n\nfunction Post() {\n    const { authed, logout } = useAuth();\n    const { postId } = useParams();\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [post, setPost] = useState<post>();\n    const [comments, setComments] = useState<any>(<Loading />);\n    const [newComment, setNewComment] = useState<Boolean>();\n    const [commentFormErrors, setCommentFormErrors] = useState(<></>);\n    const [commentContent, setCommentContent] = useState(\"\");\n    const commentSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const formData: any = new FormData(e.currentTarget);\n        const token: string = String(localStorage.getItem(\"token\"));\n        const user = await fetch(`${BASE_URL}/user`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${token}`,\n            },\n        })\n            .then((res) => res.json())\n            .catch(() => null);\n        if (user) {\n            const comment = {\n                content: String(formData.get(\"comment\")),\n            };\n            const result = await fetch(`${BASE_URL}/posts/${postId}/comments`, {\n                mode: \"cors\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                    authorization: `Bearer ${token}`,\n                },\n                method: \"POST\",\n                body: JSON.stringify(comment),\n            })\n                .then((res) => res.json())\n                .catch((error) => error);\n            if (result.comment) {\n                setNewComment((bool) => !bool);\n                setCommentContent(\"\");\n            } else if (result.errors) {\n                setCommentFormErrors(\n                    <ul>\n                        {result.errors.map((error: any) => {\n                            return (\n                                <li key={error.msg} className=\"error\">\n                                    {error.msg}\n                                </li>\n                            );\n                        })}\n                    </ul>\n                );\n            }\n        } else {\n            logout();\n            alert(\"user data is invalid login again\");\n        }\n    };\n    useEffect(() => {\n        fetch(`${BASE_URL}/posts/${postId}`, {\n            mode: \"cors\",\n        })\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    if (result.msg) {\n                        throw new Error(\"Error: 404 Page not Found\");\n                    }\n                    setIsLoaded(true);\n                    setPost(result);\n                },\n                (error) => {\n                    setIsLoaded(false);\n                    setError(error);\n                }\n            )\n            .catch((error) => {\n                setError(error);\n            });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    useEffect(() => {\n        fetch(`${BASE_URL}/posts/${postId}/comments`, {\n            mode: \"cors\",\n        })\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    if (result.message) {\n                        throw new Error(\"Error: 404 Page not Found\");\n                    }\n                    setComments(() => {\n                        return (\n                            <>\n                                {result.reverse().map((comment: comment) => (\n                                    <li\n                                        key={comment._id}\n                                        id={comment._id}\n                                        className=\"comment\"\n                                    >\n                                        <h3>{comment.author}</h3>\n                                        <p>{comment.content}</p>\n                                        <span>\n                                            {new Date(comment.publishedAt)\n                                                .toISOString()\n                                                .replace(/T/, \" \")\n                                                .replace(/\\..+/, \"\")}\n                                        </span>\n                                    </li>\n                                ))}\n                            </>\n                        );\n                    });\n                },\n                (error) => {\n                    setError(error);\n                }\n            )\n            .catch((error) => {\n                setError(error);\n            });\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [newComment]);\n    if (error) {\n        return <ErrorMessage message={error.message} />;\n    } else if (!isLoaded) {\n        return <Loading />;\n    } else {\n        return (\n            <div>\n                <div className=\"post\">\n                    <h1>{post?.title}</h1>\n                    <p>{post?.content}</p>\n                    <span>\n                        {post?.publishedAt\n                            ? new Date(post.publishedAt)\n                                  .toISOString()\n                                  .replace(/T/, \" \")\n                                  .replace(/\\..+/, \"\")\n                            : \"\"}\n                    </span>\n                </div>\n\n                <ul className=\"comment-container\">\n                    <header>Comments</header>\n                    {authed && (\n                        <form\n                            className=\"form comment-form\"\n                            onSubmit={commentSubmitted}\n                            action=\"\"\n                            method=\"GET\"\n                        >\n                            <label htmlFor=\"comment\">\n                                comment as{\" \"}\n                                <span>{localStorage.getItem(\"username\")}</span>\n                            </label>\n                            <textarea\n                                name=\"comment\"\n                                id=\"comment\"\n                                cols={20}\n                                rows={10}\n                                value={commentContent}\n                                onChange={(e) => {\n                                    setCommentContent(e.target.value);\n                                }}\n                            ></textarea>\n\n                            <input type=\"submit\" value=\"comment\" />\n                            {commentFormErrors}\n                        </form>\n                    )}\n                    {comments}\n                </ul>\n            </div>\n        );\n    }\n}\nexport default Post;\n","import { Navigate, Outlet } from \"react-router\";\n\nfunction RequireAdmin() {\n    if (localStorage.getItem(\"admin\") === \"true\") {\n        return <Outlet />;\n    } else return <Navigate to=\"/login\" />;\n}\nexport default RequireAdmin;\n","import { ReactElement, useState } from \"react\";\nimport { Navigate } from \"react-router\";\nimport { BASE_URL } from \"..\";\nimport useAuth from \"../hooks/useAuth\";\nimport user from \"../interfaces/user\";\nimport \"../style/form.scss\";\nimport Loading from \"./Loading\";\n\nfunction Signup() {\n    const [formMessage, setFormMessage] = useState<ReactElement<any, any>>();\n    const { login } = useAuth();\n    const [loggedIn, setLoggedIn] = useState<Boolean>(false);\n\n    const formSubmitted = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setFormMessage(<Loading />);\n        const formData: any = new FormData(e.currentTarget);\n        const form: user = {\n            username: formData.get(\"username\"),\n            email: formData.get(\"email\"),\n            password: formData.get(\"password\"),\n        };\n        const result = await fetch(`${BASE_URL}/auth/signup`, {\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            method: \"POST\",\n            body: JSON.stringify(form),\n        }).then((res) => res.json());\n        if (result.errors) {\n            setFormMessage(\n                <ul>\n                    {result.errors.map((error: any) => {\n                        return (\n                            <li key={error.msg} className=\"error\">\n                                {error.msg}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        } else {\n            login({ email: form.email, password: form.password }).then(\n                (error: string) => {\n                    if (error) {\n                        return <Navigate to=\"/login\" />;\n                    } else {\n                        setLoggedIn(true);\n                    }\n                }\n            );\n        }\n    };\n    if (loggedIn) return <Navigate to=\"/\" />;\n    return (\n        <form className=\"form\" onSubmit={formSubmitted} action=\"\" method=\"GET\">\n            <header>Sign up</header>\n            <label htmlFor=\"username\">Your username:</label>\n            <input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"john_smith\"\n                name=\"username\"\n                required\n            ></input>\n            <label htmlFor=\"email\">Your email:</label>\n            <input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"example@mail.com\"\n                name=\"email\"\n                required\n            ></input>\n            <label htmlFor=\"password\">Your password:</label>\n            <input\n                id=\"password\"\n                type=\"password\"\n                name=\"password\"\n                required\n            ></input>\n            {formMessage}\n            <input type=\"submit\" value=\"Signup\"></input>\n        </form>\n    );\n}\nexport default Signup;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport About from \"./components/About\";\nimport AdminSignup from \"./components/AdminSignup\";\nimport AllPosts from \"./components/AllPosts\";\nimport AllPostsAdmin from \"./components/AllPostsAdmin\";\nimport EditPost from \"./components/EditPost\";\nimport ErrorMessage from \"./components/ErrorMessage\";\nimport Header from \"./components/Header\";\nimport Login from \"./components/Login\";\nimport Logout from \"./components/Logout\";\nimport NewPost from \"./components/NewPost\";\nimport Post from \"./components/Post\";\nimport RequireAdmin from \"./components/RequireAdmin\";\nimport Signup from \"./components/Signup\";\nimport { AuthProvider } from \"./hooks/useAuth\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nexport const BASE_URL = \"https://blog-i3b.herokuapp.com\";\n\nReactDOM.render(\n    <Router>\n        <AuthProvider>\n            <Header />\n            <Routes>\n                <Route path=\"/\" element={<AllPosts />}></Route>\n                <Route path=\"/posts/:postId\" element={<Post />}></Route>\n                <Route path=\"/login\" element={<Login />}></Route>\n                <Route path=\"/signup\" element={<Signup />}></Route>\n                <Route path=\"/logout\" element={<Logout />}></Route>\n                <Route path=\"/becomeadmin\" element={<AdminSignup />}></Route>\n                <Route path=\"/about\" element={<About />}></Route>\n                <Route path=\"/admin\" element={<RequireAdmin />}>\n                    <Route path=\"/admin/\" element={<AllPostsAdmin />}></Route>\n                    <Route path=\"/admin/new\" element={<NewPost />}></Route>\n                    <Route\n                        path=\"/admin/posts/:postId/edit\"\n                        element={<EditPost />}\n                    ></Route>\n                </Route>\n                <Route\n                    path=\"/*\"\n                    element={<ErrorMessage message=\"404 Page not found\" />}\n                ></Route>\n            </Routes>\n        </AuthProvider>\n    </Router>,\n    document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}